
rem 1. Create a view named Blue_Flavor, which display the product details (product id, 
food, price) of Blueberry flavor.

create view Blue_Flavor(productid,food,price)
as (select pid,food,price from products
where flavor = 'Blueberry');
select * from Blue_Flavor;

rem update check
select COLUMN_NAME,UPDATABLE from USER_UPDATABLE_COLUMNS 
where table_name = 'BLUE_FLAVOR';

insert into products values('20-BC-C-12','Blueberry','Cake',10.12);

select * from Blue_Flavor;

update Blue_Flavor
set price = price+10
where food='Danish';

select * from products where flavor='Blueberry';

delete from Blue_Flavor
where food = 'Cake';
select * from Blue_Flavor;

rem 2. Create a view named Cheap_Food, which display the details (product id, flavor, 
food, price) of products with price lesser than $1. Ensure that, the price of these 
food(s) should never rise above $1 through view.

create view Cheap_Food
as (select * from products where price < 1)
with check option;

rem update check
select COLUMN_NAME,UPDATABLE from USER_UPDATABLE_COLUMNS 
where table_name = 'CHEAP_FOOD';

select * from Cheap_Food;

update Cheap_Food set price=price+10;

select * from products where price < 1;

insert into products
values('20-BC-C-13','Blueberry','Cake',0.5);

select * from products where price < 1;

delete from Cheap_Food
where food = 'Cake';
select * from Cheap_Food;

rem 3. Create a view called Hot_Food that show the product id and its quantity where the 
same product is ordered more than once in the same receipt.

create view Hot_Food as
(select p.pid,count(i.item) as count 
from item_list i,products p 
where p.pid = i.item 
group by i.rno,p.pid 
having count(i.item)>1); 

rem check updates
select COLUMN_NAME,UPDATABLE from USER_UPDATABLE_COLUMNS 
where table_name = 'HOT_FOOD';

insert into item_list values(73716, 6,'70-MAR');
select * from Hot_Food;



rem 4. Create a view named Pie_Food that will display the details (customer lname, flavor, 
receipt number and date, ordinal) who had ordered the Pie food with receipt details.

create view Pie_Food as
(select c.lname,p.flavor,r.rno,r.rdate,i.ordinal 
from customers c,products p,receipts r,item_list i
where c.cid = r.cid and p.pid = i.item and r.rno = i.rno and p.food='Pie');

rem check update

select COLUMN_NAME,UPDATABLE from USER_UPDATABLE_COLUMNS 
where table_name = 'HOT_FOOD';

insert into Customers
values(23,'Nitin','Appiah');

insert into item_list
values(50660, 7,  '70-W');

select * from Pie_Food;

rem 5. Create a view Cheap_View from Cheap_Food that shows only the product id, flavor 
and food.

create view Cheap_View as
select pid,flavor,food from Cheap_Food;
select * from Cheap_View;

select COLUMN_NAME,UPDATABLE from USER_UPDATABLE_COLUMNS 
where table_name = 'CHEAP_VIEW';

select * from products where price < 1;

select * from Cheap_View;

update Cheap_view set food='Cake';

select * from Cheap_View;

select * from products where price < 1;

rem 6. Create a sequence named Ordinal_No_Seq which generates the ordinal number 
starting from 1, increment by 1, to a maximum of 10. Include the options of cycle, 
cache and order. Use this sequence to populate the item_list table for a new order.

CREATE SEQUENCE Ordinal_No_Seq
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 10
CYCLE 
cache 5
order ;

insert into Receipts values(69875, '28-Oct-2007', 15);
insert into item_list values(69875, Ordinal_No_Seq.nextval,  '70-TU');
insert into item_list values(69875, Ordinal_No_Seq.nextval,  '70-TU');
insert into item_list values(69875, Ordinal_No_Seq.nextval,  '70-TU');


rem 7. Create a synonym named Product_details for the item_list relation. Perform the 
DML operations on it.

create synonym Product_details for item_list;

select * from Product_details where ordinal=6;

rem 8. Drop all the above created database objects.

drop view Blue_Flavor;
drop view Cheap_Food;
drop view Hot_Food;
drop view Pie_Food;
drop view Cheap_View;
drop sequence Ordinal_No_Seq;
drop synonym Product_Details;